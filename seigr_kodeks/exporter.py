import os
import shutil
import json
from seigr_kodeks.html_renderer import HTMLRenderer
from seigr_kodeks.markdown_parser import MarkdownParser

class BookExporter:
    def __init__(self, book_path):
        if not book_path or not os.path.exists(book_path):
            raise ValueError("Invalid book path provided.")

        self.book_path = book_path
        self.export_path = os.path.join(book_path, "export")
        self.chapters_path = os.path.join(book_path, "chapters")
        self.media_path = os.path.join(book_path, "media")
        self.static_path = os.path.join(book_path, "static")
        
        self.html_renderer = HTMLRenderer(book_path)
        self.markdown_parser = MarkdownParser(self.chapters_path)

        os.makedirs(self.export_path, exist_ok=True)
        os.makedirs(os.path.join(self.export_path, "chapters"), exist_ok=True)
        os.makedirs(os.path.join(self.export_path, "media"), exist_ok=True)
        os.makedirs(os.path.join(self.export_path, "static"), exist_ok=True)

    def copy_static_files(self):
        """Copies media and CSS files to the export directory."""
        if os.path.exists(self.media_path):
            for file in os.listdir(self.media_path):
                shutil.copy(os.path.join(self.media_path, file), os.path.join(self.export_path, "media"))

        styles_css = """
        body { font-family: Arial, sans-serif; max-width: 800px; margin: auto; padding: 20px; }
        h1, h2, h3 { color: #2c3e50; }
        a { text-decoration: none; color: #2980b9; }
        a:hover { text-decoration: underline; }
        """
        with open(os.path.join(self.export_path, "static", "styles.css"), "w", encoding="utf-8") as file:
            file.write(styles_css)

    def generate_navigation(self, chapters):
        """Creates navigation links for previous and next chapters."""
        nav_links = {}
        for i, chapter in enumerate(chapters):
            prev_link = (
                f'<a href="{chapters[i-1]["filename"].replace(".md", ".html")}">Previous</a>'
                if i > 0 else ""
            )
            next_link = (
                f'<a href="{chapters[i+1]["filename"].replace(".md", ".html")}">Next</a>'
                if i < len(chapters) - 1 else ""
            )
            nav_links[chapter["filename"]] = f'<nav>{prev_link} {next_link}</nav>'
        return nav_links

    def export_book(self):
        """Exports the entire book as a static HTML site."""
        book_metadata_path = os.path.join(self.book_path, "book.json")
        if not os.path.exists(book_metadata_path):
            print("Error: No book.json found. Make sure to set up the book properly.")
            return
        
        with open(book_metadata_path, "r", encoding="utf-8") as file:
            book_metadata = json.load(file)

        chapters = book_metadata.get("chapters", [])
        if not chapters:
            print("No chapters found to export.")
            return

        nav_links = self.generate_navigation(chapters)

        for chapter in chapters:
            chapter_md_path = os.path.join(self.chapters_path, chapter["filename"])
            if not os.path.exists(chapter_md_path):
                continue

            markdown_text = self.markdown_parser.read_markdown_file(chapter["filename"])
            html_content = self.html_renderer.render_html(markdown_text)

            nav_html = nav_links.get(chapter["filename"], "")
            html_content = html_content.replace("</main>", f"{nav_html}</main>")

            output_file = os.path.join(self.export_path, "chapters", chapter["filename"].replace(".md", ".html"))
            with open(output_file, "w", encoding="utf-8") as file:
                file.write(html_content)

        self.generate_index_html(book_metadata, chapters)
        self.copy_static_files()
        print(f"✅ Book exported successfully to {self.export_path}")

    def generate_index_html(self, book_metadata, chapters):
        """Creates the main index.html for the book."""
        index_content = f"""<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{book_metadata.get("title", "My Book")}</title>
            <link rel="stylesheet" href="static/styles.css">
        </head>
        <body>
            <header>
                <h1>{book_metadata.get("title", "My Book")}</h1>
            </header>
            <main>
                <ul>
                {''.join([f'<li><a href="chapters/{chapter["filename"].replace(".md", ".html")}">{chapter["title"]}</a></li>' for chapter in chapters])}
                </ul>
            </main>
            <footer><p>Generated by SeigrKodeks</p></footer>
        </body>
        </html>"""

        with open(os.path.join(self.export_path, "index.html"), "w", encoding="utf-8") as file:
            file.write(index_content)


# ✅ **Expose `export_to_html` & `preview_html` for Import**
def export_to_html(book_path):
    """Wrapper function to instantiate and run BookExporter."""
    exporter = BookExporter(book_path)
    exporter.export_book()

def preview_html(book_path):
    """Opens the exported index.html in a web browser."""
    import webbrowser
    index_path = os.path.join(book_path, "export", "index.html")
    if os.path.exists(index_path):
        webbrowser.open(index_path)
    else:
        print("Error: The book has not been exported yet.")

# **Make sure these functions are exposed**
__all__ = ["export_to_html", "preview_html"]
