import os
import markdown
from bs4 import BeautifulSoup


class HTMLRenderer:
    def __init__(self, book_path):
        self.book_path = book_path
        self.template_path = os.path.join(book_path, "templates")
        os.makedirs(self.template_path, exist_ok=True)

        # Ensure default templates exist
        self.ensure_default_templates()

    def ensure_default_templates(self):
        """Ensures default HTML templates are available."""
        default_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="../static/styles.css">
</head>
<body>
    <header>
        <h1>{{ title }}</h1>
    </header>
    <main>
        {{ content }}
    </main>
    <footer>
        <p>Generated by SeigrKodeks</p>
    </footer>
</body>
</html>"""

        template_file = os.path.join(self.template_path, "page_template.html")
        if not os.path.exists(template_file):
            with open(template_file, "w", encoding="utf-8") as file:
                file.write(default_template)

    def render_html(self, markdown_text):
        """Converts Markdown to styled HTML using the template."""
        html_content = markdown.markdown(
            markdown_text,
            extensions=[
                "fenced_code",
                "tables",
                "toc",
                "sane_lists",
                "nl2br",
                "attr_list",
            ],
        )

        template_file = os.path.join(self.template_path, "page_template.html")
        with open(template_file, "r", encoding="utf-8") as file:
            template = file.read()

        # Extract title from markdown
        soup = BeautifulSoup(html_content, "html.parser")
        title = soup.find("h1").text if soup.find("h1") else "Untitled Chapter"

        rendered_html = template.replace("{{ title }}", title).replace(
            "{{ content }}", html_content
        )
        return rendered_html

    def save_rendered_html(self, markdown_text, output_path):
        """Saves the rendered HTML to a file."""
        rendered_html = self.render_html(markdown_text)
        with open(output_path, "w", encoding="utf-8") as file:
            file.write(rendered_html)


if __name__ == "__main__":
    # Example Usage
    book_path = "path/to/book"
    html_renderer = HTMLRenderer(book_path)

    sample_md = """# Chapter 1
    This is a **test** chapter.

    - List item 1
    - List item 2

    ![Example Image](media/example.jpg)
    """

    rendered_html = html_renderer.render_html(sample_md)
    print("Rendered HTML:\n", rendered_html[:500])  # Preview first 500 chars

    output_path = os.path.join(book_path, "output.html")
    html_renderer.save_rendered_html(sample_md, output_path)
    print(f"Saved rendered HTML to: {output_path}")
